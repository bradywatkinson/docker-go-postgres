// main_test.go

package testutils

import (
  "fmt"
  "log"
  "strconv"

  "app/common"
)

// SetupDB is a utility function to setup a testing db
func SetupDB(a *common.App) {
  if _, err := a.DB.Exec(setupDBQuery); err != nil {
    log.Fatal(err)
  }
}

const setupDBQuery = `
BEGIN;

CREATE TABLE alembic_version (
    version_num VARCHAR(32) NOT NULL,
    CONSTRAINT alembic_version_pkc PRIMARY KEY (version_num)
);

-- Running upgrade  -> 0e394ab31a97

CREATE TABLE product (
    committed_timestamp TIMESTAMP WITHOUT TIME ZONE DEFAULT now() NOT NULL,
    id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name TEXT NOT NULL,
    price NUMERIC(30, 16) NOT NULL,
    CONSTRAINT pk_product PRIMARY KEY (id)
);

INSERT INTO alembic_version (version_num) VALUES ('0e394ab31a97');

-- Running upgrade 0e394ab31a97 -> 2946eee19802

CREATE TABLE customer (
    committed_timestamp TIMESTAMP WITHOUT TIME ZONE DEFAULT now() NOT NULL,
    id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    first_name TEXT NOT NULL,
    last_name TEXT NOT NULL,
    CONSTRAINT pk_customer PRIMARY KEY (id)
);

CREATE TABLE merchant (
    committed_timestamp TIMESTAMP WITHOUT TIME ZONE DEFAULT now() NOT NULL,
    id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name TEXT NOT NULL,
    CONSTRAINT pk_merchant PRIMARY KEY (id)
);

CREATE TABLE review (
    committed_timestamp TIMESTAMP WITHOUT TIME ZONE DEFAULT now() NOT NULL,
    id INT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    rating INTEGER NOT NULL,
    review TEXT,
    customer_id INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    CONSTRAINT pk_review PRIMARY KEY (id),
    CONSTRAINT fk_review_customer_id_customer FOREIGN KEY(customer_id) REFERENCES customer (id),
    CONSTRAINT fk_review_product_id_product FOREIGN KEY(product_id) REFERENCES product (id)
);

ALTER TABLE product ADD COLUMN merchant_id INTEGER NOT NULL;

ALTER TABLE product ADD CONSTRAINT fk_product_merchant_id_merchant FOREIGN KEY(merchant_id) REFERENCES merchant (id);

UPDATE alembic_version SET version_num='2946eee19802' WHERE alembic_version.version_num = '0e394ab31a97';

COMMIT;
`

// TeardownDB is a utility function to cleanup the db after testing
func TeardownDB(a *common.App) {
  if _, err := a.DB.Exec(teardownDBQuery); err != nil {
    log.Fatal(err)
  }
}

const teardownDBQuery = `
BEGIN;

ALTER TABLE product DROP CONSTRAINT fk_product_merchant_id_merchant;

ALTER TABLE product DROP COLUMN merchant_id;

DROP TABLE review;

DROP TABLE merchant;

DROP TABLE customer;

UPDATE alembic_version SET version_num='0e394ab31a97' WHERE alembic_version.version_num = '8ffce1ac5379';

DROP TABLE product;

DELETE FROM alembic_version WHERE alembic_version.version_num = '0e394ab31a97';

DROP TABLE alembic_version;

COMMIT;
`

// ClearTable is a utility function to quickly clear tables and reset their primary key sequence
func ClearTable(a *common.App, table string) {
  a.DB.Exec(fmt.Sprintf("DELETE FROM %s", table))
  a.DB.Exec(fmt.Sprintf("ALTER SEQUENCE %s_id_seq RESTART WITH 1", table))
}

// AddCustomers is a utility function to quickly add customers to the db for testing
func AddCustomers(a *common.App, count int) ([]int, error) {
  ids := []int{}

  if count < 1 {
    count = 1
  }

  for i := 0; i < count; i++ {
    var id int
    err := a.DB.QueryRow("INSERT INTO customer(first_name, last_name) VALUES($1, $2) RETURNING id",
      "customerGirstName"+strconv.Itoa(i),
      "customerLastName"+strconv.Itoa(i),
    ).Scan(&id)
    if err != nil {
      return nil, err
    }
    ids = append(ids, id)
  }
  return ids, nil
}

// AddMerchants is a utility function to quickly add merchants to the db for testing
func AddMerchants(a *common.App, count int) ([]int, error) {
  ids := []int{}

  if count < 1 {
    count = 1
  }

  for i := 0; i < count; i++ {
    var id int
    err := a.DB.QueryRow("INSERT INTO merchant(name) VALUES($1) RETURNING id", "Merchant "+strconv.Itoa(i)).Scan(&id)
    if err != nil {
      return nil, err
    }
    ids = append(ids, id)
  }
  return ids, nil
}

// AddProducts is a utility function to quickly add products to the db for testing
func AddProducts(a *common.App, count int) ([]int, error) {
  ids := []int{}

  mIds, _ := AddMerchants(a, 1)

  if count < 1 {
    count = 1
  }

  for i := 0; i < count; i++ {
    var id int
    err := a.DB.QueryRow("INSERT INTO product(name, price, merchant_id) VALUES($1, $2, $3) RETURNING id",
      "Product "+strconv.Itoa(i),
      (i+1.0)*10,
      mIds[0],
    ).Scan(&id)
    if err != nil {
      return nil, err
    }
    ids = append(ids, id)
  }
  return ids, nil
}

// AddReviews is a utility function to quickly add reviews to the db for testing
func AddReviews(a *common.App, count int) ([]int, error) {
  ids := []int{}

  pIds, _ := AddProducts(a, 1)
  cIds, _ := AddCustomers(a, 1)

  if count < 1 {
    count = 1
  }

  for i := 0; i < count; i++ {
    var id int
    err := a.DB.QueryRow("INSERT INTO review(rating, review, customer_id, product_id) VALUES($1, $2, $3, $4) RETURNING id",
      i,
      "Reiew "+strconv.Itoa(i),
      pIds[0],
      cIds[0],
    ).Scan(&id)
    if err != nil {
      return nil, err
    }
    ids = append(ids, id)
  }
  return ids, nil
}
