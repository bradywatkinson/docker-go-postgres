// Code generated by protoc-gen-go. DO NOT EDIT.
// source: customer/customer.proto

package customer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The customer interface schema
type CustomerSchema struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName            string   `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string   `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomerSchema) Reset()         { *m = CustomerSchema{} }
func (m *CustomerSchema) String() string { return proto.CompactTextString(m) }
func (*CustomerSchema) ProtoMessage()    {}
func (*CustomerSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_customer_199691982ba921f1, []int{0}
}
func (m *CustomerSchema) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomerSchema.Unmarshal(m, b)
}
func (m *CustomerSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomerSchema.Marshal(b, m, deterministic)
}
func (dst *CustomerSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerSchema.Merge(dst, src)
}
func (m *CustomerSchema) XXX_Size() int {
	return xxx_messageInfo_CustomerSchema.Size(m)
}
func (m *CustomerSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerSchema.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerSchema proto.InternalMessageInfo

func (m *CustomerSchema) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CustomerSchema) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *CustomerSchema) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func init() {
	proto.RegisterType((*CustomerSchema)(nil), "customer.CustomerSchema")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomerServiceClient interface {
	// Create a customer
	CreateCustomer(ctx context.Context, in *CustomerSchema, opts ...grpc.CallOption) (*CustomerSchema, error)
	// Get a customer by id
	GetCustomer(ctx context.Context, in *CustomerSchema, opts ...grpc.CallOption) (*CustomerSchema, error)
	// Update a customer by id
	UpdateCustomer(ctx context.Context, in *CustomerSchema, opts ...grpc.CallOption) (*CustomerSchema, error)
}

type customerServiceClient struct {
	cc *grpc.ClientConn
}

func NewCustomerServiceClient(cc *grpc.ClientConn) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) CreateCustomer(ctx context.Context, in *CustomerSchema, opts ...grpc.CallOption) (*CustomerSchema, error) {
	out := new(CustomerSchema)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/CreateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomer(ctx context.Context, in *CustomerSchema, opts ...grpc.CallOption) (*CustomerSchema, error) {
	out := new(CustomerSchema)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/GetCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateCustomer(ctx context.Context, in *CustomerSchema, opts ...grpc.CallOption) (*CustomerSchema, error) {
	out := new(CustomerSchema)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/UpdateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
type CustomerServiceServer interface {
	// Create a customer
	CreateCustomer(context.Context, *CustomerSchema) (*CustomerSchema, error)
	// Get a customer by id
	GetCustomer(context.Context, *CustomerSchema) (*CustomerSchema, error)
	// Update a customer by id
	UpdateCustomer(context.Context, *CustomerSchema) (*CustomerSchema, error)
}

func RegisterCustomerServiceServer(s *grpc.Server, srv CustomerServiceServer) {
	s.RegisterService(&_CustomerService_serviceDesc, srv)
}

func _CustomerService_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/CreateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CreateCustomer(ctx, req.(*CustomerSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/GetCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomer(ctx, req.(*CustomerSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/UpdateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateCustomer(ctx, req.(*CustomerSchema))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "customer.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomer",
			Handler:    _CustomerService_CreateCustomer_Handler,
		},
		{
			MethodName: "GetCustomer",
			Handler:    _CustomerService_GetCustomer_Handler,
		},
		{
			MethodName: "UpdateCustomer",
			Handler:    _CustomerService_UpdateCustomer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer/customer.proto",
}

func init() { proto.RegisterFile("customer/customer.proto", fileDescriptor_customer_199691982ba921f1) }

var fileDescriptor_customer_199691982ba921f1 = []byte{
	// 180 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4f, 0x2e, 0x2d, 0x2e,
	0xc9, 0xcf, 0x4d, 0x2d, 0xd2, 0x87, 0x31, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x38, 0x60,
	0x7c, 0xa5, 0x18, 0x2e, 0x3e, 0x67, 0x28, 0x3b, 0x38, 0x39, 0x23, 0x35, 0x37, 0x51, 0x88, 0x8f,
	0x8b, 0x29, 0x33, 0x45, 0x82, 0x51, 0x81, 0x51, 0x83, 0x35, 0x88, 0x29, 0x33, 0x45, 0x48, 0x96,
	0x8b, 0x2b, 0x2d, 0xb3, 0xa8, 0xb8, 0x24, 0x3e, 0x2f, 0x31, 0x37, 0x55, 0x82, 0x49, 0x81, 0x51,
	0x83, 0x33, 0x88, 0x13, 0x2c, 0xe2, 0x97, 0x98, 0x9b, 0x2a, 0x24, 0xcd, 0xc5, 0x99, 0x93, 0x08,
	0x93, 0x65, 0x06, 0xcb, 0x72, 0x80, 0x04, 0x40, 0x92, 0x46, 0xcf, 0x18, 0xb9, 0xf8, 0xe1, 0xc6,
	0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0xb9, 0x71, 0xf1, 0x39, 0x17, 0xa5, 0x26, 0x96, 0xa4,
	0xc2, 0x24, 0x84, 0x24, 0xf4, 0xe0, 0xce, 0x43, 0x75, 0x8b, 0x14, 0x4e, 0x19, 0x25, 0x06, 0x21,
	0x67, 0x2e, 0x6e, 0xf7, 0xd4, 0x12, 0x0a, 0x0d, 0x71, 0xe3, 0xe2, 0x0b, 0x2d, 0x48, 0xa1, 0xd8,
	0x31, 0x49, 0x6c, 0xe0, 0x70, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x57, 0x99, 0x10, 0xda,
	0x72, 0x01, 0x00, 0x00,
}
