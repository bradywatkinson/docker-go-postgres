// Code generated by protoc-gen-go. DO NOT EDIT.
// source: customer/customer.proto

package customer

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// CustomerRequest
type CustomerRequest struct {
	Id                   int32           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Customer             *CustomerSchema `protobuf:"bytes,2,opt,name=customer,proto3" json:"customer,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CustomerRequest) Reset()         { *m = CustomerRequest{} }
func (m *CustomerRequest) String() string { return proto.CompactTextString(m) }
func (*CustomerRequest) ProtoMessage()    {}
func (*CustomerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_customer_ad7685f672864b6b, []int{0}
}
func (m *CustomerRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomerRequest.Unmarshal(m, b)
}
func (m *CustomerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomerRequest.Marshal(b, m, deterministic)
}
func (dst *CustomerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerRequest.Merge(dst, src)
}
func (m *CustomerRequest) XXX_Size() int {
	return xxx_messageInfo_CustomerRequest.Size(m)
}
func (m *CustomerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerRequest proto.InternalMessageInfo

func (m *CustomerRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CustomerRequest) GetCustomer() *CustomerSchema {
	if m != nil {
		return m.Customer
	}
	return nil
}

// The customer interface schema
type CustomerSchema struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName            string   `protobuf:"bytes,2,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName             string   `protobuf:"bytes,3,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomerSchema) Reset()         { *m = CustomerSchema{} }
func (m *CustomerSchema) String() string { return proto.CompactTextString(m) }
func (*CustomerSchema) ProtoMessage()    {}
func (*CustomerSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_customer_ad7685f672864b6b, []int{1}
}
func (m *CustomerSchema) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomerSchema.Unmarshal(m, b)
}
func (m *CustomerSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomerSchema.Marshal(b, m, deterministic)
}
func (dst *CustomerSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomerSchema.Merge(dst, src)
}
func (m *CustomerSchema) XXX_Size() int {
	return xxx_messageInfo_CustomerSchema.Size(m)
}
func (m *CustomerSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomerSchema.DiscardUnknown(m)
}

var xxx_messageInfo_CustomerSchema proto.InternalMessageInfo

func (m *CustomerSchema) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CustomerSchema) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *CustomerSchema) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

// CustomersRequest describes a request to get count customers starting at id start
type CustomersRequest struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Start                int32    `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomersRequest) Reset()         { *m = CustomersRequest{} }
func (m *CustomersRequest) String() string { return proto.CompactTextString(m) }
func (*CustomersRequest) ProtoMessage()    {}
func (*CustomersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_customer_ad7685f672864b6b, []int{2}
}
func (m *CustomersRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomersRequest.Unmarshal(m, b)
}
func (m *CustomersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomersRequest.Marshal(b, m, deterministic)
}
func (dst *CustomersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomersRequest.Merge(dst, src)
}
func (m *CustomersRequest) XXX_Size() int {
	return xxx_messageInfo_CustomersRequest.Size(m)
}
func (m *CustomersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CustomersRequest proto.InternalMessageInfo

func (m *CustomersRequest) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *CustomersRequest) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

// CustomersResponse is a list of customers
type CustomersResponse struct {
	Customers            []*CustomerSchema `protobuf:"bytes,1,rep,name=customers,proto3" json:"customers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *CustomersResponse) Reset()         { *m = CustomersResponse{} }
func (m *CustomersResponse) String() string { return proto.CompactTextString(m) }
func (*CustomersResponse) ProtoMessage()    {}
func (*CustomersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_customer_ad7685f672864b6b, []int{3}
}
func (m *CustomersResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CustomersResponse.Unmarshal(m, b)
}
func (m *CustomersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CustomersResponse.Marshal(b, m, deterministic)
}
func (dst *CustomersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomersResponse.Merge(dst, src)
}
func (m *CustomersResponse) XXX_Size() int {
	return xxx_messageInfo_CustomersResponse.Size(m)
}
func (m *CustomersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CustomersResponse proto.InternalMessageInfo

func (m *CustomersResponse) GetCustomers() []*CustomerSchema {
	if m != nil {
		return m.Customers
	}
	return nil
}

func init() {
	proto.RegisterType((*CustomerRequest)(nil), "customer.CustomerRequest")
	proto.RegisterType((*CustomerSchema)(nil), "customer.CustomerSchema")
	proto.RegisterType((*CustomersRequest)(nil), "customer.CustomersRequest")
	proto.RegisterType((*CustomersResponse)(nil), "customer.CustomersResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CustomerServiceClient is the client API for CustomerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CustomerServiceClient interface {
	// Create a customer
	CreateCustomer(ctx context.Context, in *CustomerSchema, opts ...grpc.CallOption) (*CustomerSchema, error)
	// Get a customer by id
	GetCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerSchema, error)
	// Update a customer by id
	UpdateCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerSchema, error)
	// Delete a customer by id
	DeleteCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*wrappers.StringValue, error)
	// GetCustomers gets a list of customers by start and count
	GetCustomers(ctx context.Context, in *CustomersRequest, opts ...grpc.CallOption) (*CustomersResponse, error)
}

type customerServiceClient struct {
	cc *grpc.ClientConn
}

func NewCustomerServiceClient(cc *grpc.ClientConn) CustomerServiceClient {
	return &customerServiceClient{cc}
}

func (c *customerServiceClient) CreateCustomer(ctx context.Context, in *CustomerSchema, opts ...grpc.CallOption) (*CustomerSchema, error) {
	out := new(CustomerSchema)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/CreateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerSchema, error) {
	out := new(CustomerSchema)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/GetCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) UpdateCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*CustomerSchema, error) {
	out := new(CustomerSchema)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/UpdateCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) DeleteCustomer(ctx context.Context, in *CustomerRequest, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/DeleteCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *customerServiceClient) GetCustomers(ctx context.Context, in *CustomersRequest, opts ...grpc.CallOption) (*CustomersResponse, error) {
	out := new(CustomersResponse)
	err := c.cc.Invoke(ctx, "/customer.CustomerService/GetCustomers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CustomerServiceServer is the server API for CustomerService service.
type CustomerServiceServer interface {
	// Create a customer
	CreateCustomer(context.Context, *CustomerSchema) (*CustomerSchema, error)
	// Get a customer by id
	GetCustomer(context.Context, *CustomerRequest) (*CustomerSchema, error)
	// Update a customer by id
	UpdateCustomer(context.Context, *CustomerRequest) (*CustomerSchema, error)
	// Delete a customer by id
	DeleteCustomer(context.Context, *CustomerRequest) (*wrappers.StringValue, error)
	// GetCustomers gets a list of customers by start and count
	GetCustomers(context.Context, *CustomersRequest) (*CustomersResponse, error)
}

func RegisterCustomerServiceServer(s *grpc.Server, srv CustomerServiceServer) {
	s.RegisterService(&_CustomerService_serviceDesc, srv)
}

func _CustomerService_CreateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).CreateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/CreateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).CreateCustomer(ctx, req.(*CustomerSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/GetCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomer(ctx, req.(*CustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_UpdateCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).UpdateCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/UpdateCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).UpdateCustomer(ctx, req.(*CustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_DeleteCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).DeleteCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/DeleteCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).DeleteCustomer(ctx, req.(*CustomerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CustomerService_GetCustomers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CustomerServiceServer).GetCustomers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/customer.CustomerService/GetCustomers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CustomerServiceServer).GetCustomers(ctx, req.(*CustomersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CustomerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "customer.CustomerService",
	HandlerType: (*CustomerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCustomer",
			Handler:    _CustomerService_CreateCustomer_Handler,
		},
		{
			MethodName: "GetCustomer",
			Handler:    _CustomerService_GetCustomer_Handler,
		},
		{
			MethodName: "UpdateCustomer",
			Handler:    _CustomerService_UpdateCustomer_Handler,
		},
		{
			MethodName: "DeleteCustomer",
			Handler:    _CustomerService_DeleteCustomer_Handler,
		},
		{
			MethodName: "GetCustomers",
			Handler:    _CustomerService_GetCustomers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "customer/customer.proto",
}

func init() { proto.RegisterFile("customer/customer.proto", fileDescriptor_customer_ad7685f672864b6b) }

var fileDescriptor_customer_ad7685f672864b6b = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0xc1, 0x4f, 0xf2, 0x40,
	0x10, 0xc5, 0x29, 0x84, 0x2f, 0x74, 0xf8, 0x52, 0x75, 0x63, 0x62, 0x2d, 0x6a, 0xc8, 0x9e, 0x38,
	0x95, 0x04, 0x8d, 0x47, 0x2f, 0x10, 0x89, 0x21, 0xf1, 0x50, 0xa2, 0x5e, 0x4c, 0xcc, 0x52, 0x06,
	0x6c, 0xd2, 0x76, 0xeb, 0xee, 0x56, 0xaf, 0xfe, 0xe9, 0x86, 0x2d, 0x5b, 0x30, 0x15, 0x62, 0xbc,
	0x75, 0xe6, 0xbd, 0xfd, 0xbd, 0x99, 0xee, 0xc2, 0x49, 0x98, 0x4b, 0xc5, 0x13, 0x14, 0x7d, 0xf3,
	0xe1, 0x67, 0x82, 0x2b, 0x4e, 0x5a, 0xa6, 0xf6, 0x2e, 0x96, 0x9c, 0x2f, 0x63, 0xec, 0xeb, 0xfe,
	0x2c, 0x5f, 0xf4, 0x3f, 0x04, 0xcb, 0x32, 0x14, 0xb2, 0x70, 0xd2, 0x27, 0x38, 0x18, 0xae, 0xbd,
	0x01, 0xbe, 0xe5, 0x28, 0x15, 0x71, 0xa0, 0x1e, 0xcd, 0x5d, 0xab, 0x6b, 0xf5, 0x9a, 0x41, 0x3d,
	0x9a, 0x93, 0x2b, 0x28, 0x71, 0x6e, 0xbd, 0x6b, 0xf5, 0xda, 0x03, 0xd7, 0x2f, 0xf3, 0xcc, 0xe1,
	0x69, 0xf8, 0x8a, 0x09, 0x0b, 0x4a, 0x27, 0x7d, 0x06, 0xe7, 0xbb, 0x56, 0xe1, 0x9e, 0x03, 0x2c,
	0x22, 0x21, 0xd5, 0x4b, 0xca, 0x12, 0xd4, 0x64, 0x3b, 0xb0, 0x75, 0xe7, 0x9e, 0x25, 0x48, 0x3a,
	0x60, 0xc7, 0xcc, 0xa8, 0x0d, 0xad, 0xb6, 0x56, 0x8d, 0x95, 0x48, 0x6f, 0xe0, 0xd0, 0xd0, 0xa5,
	0x99, 0xfb, 0x18, 0x9a, 0x21, 0xcf, 0x53, 0xb5, 0x8e, 0x28, 0x8a, 0x55, 0x57, 0x2a, 0x26, 0x94,
	0x0e, 0x68, 0x06, 0x45, 0x41, 0x27, 0x70, 0xb4, 0x75, 0x5e, 0x66, 0x3c, 0x95, 0x48, 0xae, 0xc1,
	0x36, 0xe3, 0x4b, 0xd7, 0xea, 0x36, 0xf6, 0x6e, 0xba, 0xb1, 0x0e, 0x3e, 0x1b, 0x9b, 0x9f, 0x38,
	0x45, 0xf1, 0x1e, 0x85, 0x48, 0x6e, 0xc1, 0x19, 0x0a, 0x64, 0x0a, 0x8d, 0x40, 0x76, 0xa2, 0xbc,
	0x9d, 0x0a, 0xad, 0x91, 0x11, 0xb4, 0xc7, 0xa8, 0x4a, 0xc8, 0x69, 0xd5, 0xba, 0x5e, 0x7f, 0x2f,
	0x65, 0x0c, 0xce, 0x43, 0x36, 0xdf, 0x9e, 0xe6, 0x8f, 0xa0, 0x09, 0x38, 0x23, 0x8c, 0xf1, 0x77,
	0xa0, 0x33, 0xbf, 0x78, 0x7c, 0xbe, 0x79, 0x7c, 0xfe, 0x54, 0x89, 0x28, 0x5d, 0x3e, 0xb2, 0x38,
	0x47, 0x5a, 0x23, 0x77, 0xf0, 0x7f, 0x6b, 0x37, 0x49, 0xbc, 0x2a, 0xca, 0x5c, 0xae, 0xd7, 0xf9,
	0x51, 0x2b, 0x2e, 0x8e, 0xd6, 0x66, 0xff, 0x74, 0xc4, 0xe5, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xba, 0x6c, 0x58, 0xbc, 0x12, 0x03, 0x00, 0x00,
}
